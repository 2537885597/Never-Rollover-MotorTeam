///*********************************************************************************************************************
//* TC264 Opensourec Library 即（TC264 开源库）是一个基于官方 SDK 接口的第三方开源库
//* Copyright (c) 2022 SEEKFREE 逐飞科技
//*
//* 本文件是 TC264 开源库的一部分
//*
//* TC264 开源库 是免费软件
//* 您可以根据自由软件基金会发布的 GPL（GNU General Public License，即 GNU通用公共许可证）的条款
//* 即 GPL 的第3版（即 GPL3.0）或（您选择的）任何后来的版本，重新发布和/或修改它
//*
//* 本开源库的发布是希望它能发挥作用，但并未对其作任何的保证
//* 甚至没有隐含的适销性或适合特定用途的保证
//* 更多细节请参见 GPL
//*
//* 您应该在收到本开源库的同时收到一份 GPL 的副本
//* 如果没有，请参阅<https://www.gnu.org/licenses/>
//*
//* 额外注明：
//* 本开源库使用 GPL3.0 开源许可证协议 以上许可申明为译文版本
//* 许可申明英文版在 libraries/doc 文件夹下的 GPL3_permission_statement.txt 文件中
//* 许可证副本在 libraries 文件夹下 即该文件夹下的 LICENSE 文件
//* 欢迎各位使用并传播本程序 但修改内容时必须保留逐飞科技的版权声明（即本声明）
//*
//* 文件名称          cpu0_main
//* 公司名称          成都逐飞科技有限公司
//* 版本信息          查看 libraries/doc 文件夹内 version 文件 版本说明
//* 开发环境          ADS v1.9.4
//* 适用平台          TC264D
//* 店铺链接          https://seekfree.taobao.com/
//*
//* 修改记录
//* 日期              作者                备注
//* 2022-09-15       pudding            first version
//********************************************************************************************************************/
//#include "zf_common_headfile.h"
//#pragma section all "cpu0_dsram"
//// 将本语句与#pragma section all restore语句之间的全局变量都放在CPU0的RAM中
//
//// 本例程是开源库空工程 可用作移植或者测试各类内外设
//// 本例程是开源库空工程 可用作移植或者测试各类内外设
//// 本例程是开源库空工程 可用作移植或者测试各类内外设
//#ifndef CODE_COMMON_PERIPHERALS_H_
//#define CODE_COMMON_PERIPHERALS_H_
//
////宏定义
//#define unit8                        unsinged int
//
//#define BUZZER_PIN                   (P33_10)
//
//#define LED1                         (P20_9)
//#define LED2                         (P20_8)
//#define LED3                         (P21_5)
//#define LED4                         (P21_4)
//#define KEY1                         (P22_0)
//#define KEY2                         (P22_1)
//#define KEY3                         (P22_2)
//#define KEY4                         (P22_3)
//#define SWITCH2                      (P33_12)
//#define SWITCH1                      (P33_13)
//
//#define UART_INDEX                   (DEBUG_UART_INDEX)            //默认 UART_0
//#define UART_BAUDRATE                (DEBUG_UART_BAUDRATE)         //默认 115200
//#define UART_TX_PIN                  (DEBUG_UART_TX_PIN)           //默认 UART_TX_P14_0
//#define UART_RX_PIN                  (DEBUG_UART_RX_PIN)           //默认 UART_RX_P14_1
//
//#define PWM_L1                       (ATOM1_CH5_P02_5)
//#define PWM_L2                       (ATOM1_CH4_P02_4)
//
////#define PWM_CH1                    ATOM1_CH4_P02_4              //PWM输出端口
////#define DIR_CH1                    P02_5                        //电机方向输出端口
//
//#define PWM_CH1                      ATOM1_CH5_P02_5              //PWM输出端口
//#define DIR_CH1                      P02_4                        //电机方向输出端口
//
////#define PWM_CH1                     ATOM1_CH5_P02_5              //PWM输出端口
////#define DIR_CH1                     P02_6                        //电机方向输出端口
//
//#define ENCODER1_TIM                 TIM2_ENCODER                  //编码定时器
//#define ENCODER1_PLUS                TIM2_ENCODER_CH1_P33_7        //编码计数端口
//#define ENCODER1_DIR                 TIM2_ENCODER_CH2_P33_6        //编码方向采值端口
//
//#define SPEED_PAGE_INDEX             (10)                          //SPEED存储页码
//
//#define SERVO_MOTOR_PWM              (ATOM1_CH1_P33_9)             //定义主板上舵机对应引脚
//#define SERVO_MOTOR_FREQ             (50)                          //定义主板上舵机频率 请务必注意范围
//#define SERVO_MOTOR_MID              (80)                          //中值75//可以通过修改中值的方式弥补机械误差79
//#define SERVO_MOTOR_LMAX             (55)                          //左打死60
//#define SERVO_MOTOR_RMAX             (105)                         //右打死100
////#define SERVO_MOTOR_MID              (75)                          //中值75//可以通过修改中值的方式弥补机械误差79
////#define SERVO_MOTOR_LMAX             (95)                          //左打死60
////#define SERVO_MOTOR_RMAX             (55)                          //右打死100
//#define SERVO_MOTOR_FREQ             ((float)PWM_DUTY_MAX/(1000.0/(float)SERVO-MOTOR_FREQ)*(0.5+(float)(x)/90.0))//舵机占空比计算方式
//
//#define X6F-CH1                      (P10_3)                       //方向舵通道
//#define X6F-CH2                      (P02_7)                       //油门通道
//#define X6F-CH3                      (P10_1)                       //指示按钮通道
//#define X6F-CH4                      (P02_6)                       //拨动档位通道
//#define X6F-CH5                      (P21_5)                       //旋钮通道1
//#define X6F-CH6                      (P21_3)                       //旋钮通道2
//
////IPS114宏定义
//#define ips_show_string              ips114_show_string
//#define ips_show_int                 ips114_show_int
//#define ips_show_uint                ips114_show_uint
//#define ips_show_float               ips114_show_float
//#define ips_show_chinese             ips114_show_chinese
//#define ips_clear                    ips114_clear
//#define ips_init                     ips114_init
//#define ips_show_rgb565_image        ips114_show_rgb565_image
//
////IPS200宏定义
////#define ips_show_string              ips200_show_string
////#define ips_show_int                 ips200_show_int
////#define ips_show_uint                ips200_show_uint
////#define ips_show_float               ips200_show_float
////#define ips_show_chinese             ips200_show_chinese
////#define ips_clear                    ips200_clear
////#define ips_init                     ips200_init
////#define ips_show_rgb565_image        ips200_show_rgb565_image
//
////全局变量声明
//extern unit8 key1_flag;
//extern unit8 key2_flag;
//extern unit8 key3_flag;
//extern unit8 key4_flag;
//extern unit8 key_val;
//extern const unsinged char gImage_MOSS[60008];                  //MOSS壁纸
//extern float Steer_Value;
//extern int16 x6f_out;
//extern int Ctrl_GO_FLAG;
//extern int16 encoder;                                           //编码器值
//extern int16 stand;
//
////函数声明
////-------------------------------------蜂鸣器--------------------------------------------------
//void Buzzer_init()                                             //蜂鸣器初始化
//{
//    gpio_init(BUZZER_PIN,GPO,0,GPO_PUSH_PULL);
//}
//void Buzzer_check(int time1,int time2)                         //蜂鸣器自检函数
//{
//    gpio_set_level(BUZZER_PIN,1);
//    system_delay_ms(time2);
//    gpio_set_level(BUZZER_PIN,0);
//}
////-------------------------------------按键与LED--------------------------------------------------
////变量定义
//unit8 key1_state=1;                                              //按键动作状态
//unit8 key2_state=1;                                              //按键动作状态
//unit8 key3_state=1;                                              //按键动作状态
//unit8 key4_state=1;                                              //按键动作状态
//
//unit8 switch1_state=0;                                              //拨码开关动作状态
//unit8 switch2_state=0;                                              //拨码开关动作状态
//
//unit8 key1_state_last=0;                                              //上一次按键动作状态
//unit8 key2_state_last=0;                                              //上一次按键动作状态
//unit8 key3_state_last=0;                                              //上一次按键动作状态
//unit8 key4_state_last=0;                                              //上一次按键动作状态
//
//unit8 key1_flag;
//unit8 key2_flag;
//unit8 key3_flag;
//unit8 key4_flag;
//
//unit8 key_val;
//
//unit8 switch1_flag;
//unit8 switch2_flag;
//
//unit16 key1_count=-1;
//unit16 key2_count=-1;
//unit16 key3_count=-1;
//unit16 key4_count=-1;
//
//unit8 switch1_count=-1;
//unit8 switch2_count=-1;
//
//void Key_init()                                                //按键与LED初始化
//{
//    gpio_init(LED1,GPO,GPIO_HIGH,GPO_PUSH_PULL);               //初始化 LED1 输出 默认高电平 推挽输出模式
//    gpio_init(LED2,GPO,GPIO_HIGH,GPO_PUSH_PULL);               //初始化 LED2 输出 默认高电平 推挽输出模式
//    gpio_init(LED3,GPO,GPIO_HIGH,GPO_PUSH_PULL);               //初始化 LED3 输出 默认高电平 推挽输出模式
//    gpio_init(LED4,GPO,GPIO_HIGH,GPO_PUSH_PULL);               //初始化 LED4 输出 默认高电平 推挽输出模式
//
//    gpio_init(KEY1,GPI,GPIO_LOW,GPI_PULL_UP);               //初始化 KEY1 输出 默认高电平 上拉输入
//    gpio_init(KEY2,GPI,GPIO_HIGH,GPI_PULL_UP);               //初始化 KEY2 输出 默认高电平 上拉输入
//    gpio_init(KEY3,GPI,GPIO_HIGH,GPI_PULL_UP);               //初始化 KEY3 输出 默认高电平 上拉输入
//    gpio_init(KEY4,GPI,GPIO_HIGH,GPI_PULL_UP);               //初始化 KEY4 输出 默认高电平 上拉输入
//
//    gpio_init(SWITCH1,GPI,GPIO_HIGH,GPI_FLOATING_IN);               //初始化 SWITCH1 输入 默认高电平 浮空输入
//    gpio_init(SWITCH2,GPI,GPIO_HIGH,GPI_FLOATING_IN);               //初始化 SWITCH2 输入 默认高电平 浮空输入
//}
//void Key_scan(void)                                            //按键扫描
//{
//    //使用此方法的优点在于，不需要使用while(1)等待，避免处理器资源浪费
//    //保存按键状态
//    key1_state_last=key1_state;
//    key2_state_last=key2_state;
//    key3_state_last=key3_state;
//    key4_state_last=key4_state;
//
//    //读取当前按键状态
//    key1_state=gpio_get_level(KEY1);
//    key2_state=gpio_get_level(KEY2);
//    key3_state=gpio_get_level(KEY3);
//    key4_state=gpio_get_level(KEY4);
//
//    //检测到按键按下后 并放开置位标志位
//    if(key1_state && !key1_state_last)    key1_flag=1;
//    if(key2_state && !key2_state_last)    key2_flag=1;
//    if(key3_state && !key3_state_last)    key3_flag=1;
//    if(key4_state && !key4_state_last)    key4_flag=1;
//    //标志位置之后，可以使用使用标志位执行自己想要做的事件
//    //system_delay_ms(10);                                        //延时，按键程序应该保证调用时间不小于10ms
//}
////-------------------------------------摄像头--------------------------------------------------
//void Image_get(void)                                           //总钻风得到图像
//{
//    if(mt9v03x_finish_flag)
//}
//void LORA_Send_TXT(void);
//void LORA_init();                                               //LORA初始化
//void LORA_work(void)                                           //LORA工作函数
//{
//    {
//        if(fifo_date_count==1)
//        {
//            while(1) HIP4082_Motor_ctrl(0);
//            Buzzer_check(200,200);                              //自检完成
//        }
//    }
//}
//void uart_rx_interrupt_handler(void)                           //LORA串口中断
//{
//    //get_date=uart_read_byte(UART_INDEX);                     //接收数据while等待式，不建议在中断使用
//    uart_query_byte(UART_INDEX,&get_date);                   //接收数据 查询式 有数据时返回TRUE,无数据时返回FALSE
//    fifo_write_buffer(&uart_date_fifo,&get_date,1);            //将数据写入fifo中
//}
////--------------------------------电机-----------------------------------
//int16 Target_speed=0;
//int16 Current_speed=0;
//int16 Gap=0;
//int32 OUT=0;
//void HIP4082_init()                                            //HIP4082初始化
//{
//    pwm_init(PWM_L1,17000,0);                                  //PWM 通道 L1 初始化频率17KHZ 占空比初始为0
//    pwm_init(PWM_L2,0);                                        //PWM 通道 L2 初始化频率17KHZ 占空比初始为0
//}
//void HIP4082_Motor_ctrl(int32 Motor_SPEED)                      //HIP4082单路驱动
//{
//    if(Motor_SPEED>=0)
//    {
//        pwm_set_duty(PWM_L1,Motor_SPEED);                       //2.6
//        pwm_set_duty(PWM_L2,0);                                 //同一时间 一个电机只能输出一个PWM 另一通道保持低电平
//    }
//    else
//    {
//        pwm_set_duty(PWM_L1,0);
//        pwm_set_duty(PWM_L2,(-Motor_SPEED));                    //同一时间 一个电机只能输出一个PWM 另一通道保持低电平
//    }
//}
//void Motor_text(void)                                          //电机测试
//{
//    static int16 MOTOR=0;
//    key_scan();
//    if(key1_flag)
//    {
//        key1_flag=0;
//        MOTOR+=100;
//    }
//    if(key2_flag)
//    {
//        key2_flag=0;
//        MOTOR-=100;
//    }
//    if(key3_flag)
//    {
//        key3_flag=0;
//        MOTOR+=1000;
//      //  MOTOR=100;
//    }
//    if(key4_flag)
//    {
//        key4_flag=0;
//        MOTOR-=1000;
//      //  MOTOR=190;
//    }
//    ips_show_int(100,16*3,MOTOR,5);
////    HIP4082_Motor_ctrl(MOTOR);
//    BLDC_ctrl(MOTOR);
////    BLDC_Cloop_ctrl(MOTOR);
//}
//void SPEED_param_t_init()                                      //SPEED参数初始化
//{
//    if(flash_check(FLASH_SECTION_INDEX,SPEED_PAGE_INDEX))      //判断FLASH页是否有数:有数据返回1，无数据返回0
//    {
//        //flash_buffer_clear ();                               //清空缓冲区
//        flash_read_page_to_buffer(FLASH_SECTION_INDEX,SPEED_PAGE_INDEX);//将数据从FLASH指定扇区页码放入到缓冲区
//        SPEED=flash_union_buffer[0].int32_type;                //用什么数据类型写入缓冲区就用什么类型读取，不然打印出来的码是乱码
//        printf("\r\n已经更新过的（SPEED）：%d",SPEED);
//    }
//    else printf("\r\nSPEED为程序设定值（原始值）");
//}
//void BLDC_init()                                               //无刷电机初始化
//{
//    pwm_init(PWM_CH1,1000,0);                                  //PWM引脚初始化
//    gpio_init(DIR_CH1,GPO,1,GPO_PUSH_PULL);                    //方向引脚
//    PidInit(&PID_Init);
//}
//
//void BLDC_ctrl(int16 Motor_SPEED)                              //BLDC驱动
//{
//    if(Motor_SPEED>=0)                                          //正转
//    {
//        pwm_set_duty(PWM_CH1,Motor_SPEED);
//        gpio_set_level(DIR_CH1,1);
//    }
//    else                                                        //反转
//    {
//        pwm_set_duty(PWM_CH1,-Motor_SPEED);
//        gpio_set_level(DIR_CH1,0);
//    }
//      //ips_show_unit(100,16*1,Motor_SPEED,5);
//}
//
//void BLDC_Cloop_ctrl(int16 SPEED);                              //BLDC闭环控制
//
//void HALL_init(void);                                           //霍尔编码器初始化
//void HALL_gather(void);                                         //霍尔编码器获取值
//
//void Steer_init();                                              //舵机初始化
//void Steer_set(int angle);                                      //舵机驱动
//void Steer_text(void);                                          //舵机测试
//
//void Control_init();                                            //遥控器引脚初始化
//void x6f_scan(void);                                            //遥控器通道扫描
//void Control_TEXT();                                            //遥控器测试
//void Control_program(void);                                     //控制程序
//void WX_CTRL(void);
//void YX_CTRL(void);
//
//void ALL_init(void);                                            //总初始化
//
//
//
//
//// **************************** 代码区域 ****************************
//int core0_main(void)
//{
//    clock_init();                   // 获取时钟频率<务必保留>
//    debug_init();                   // 初始化默认调试串口
//
//    void ADC_init()
//    {
//
//
//    }
//
//    // 此处编写用户代码 例如外设初始化代码等
//
//
//
//    // 此处编写用户代码 例如外设初始化代码等
//    cpu_wait_event_ready();         // 等待所有核心初始化完毕
//    while (TRUE)
//    {
//        // 此处编写需要循环执行的代码
//
//
//
//        // 此处编写需要循环执行的代码
//    }
//}
//
//#pragma section all restore
//
//
//// **************************** 代码区域 ****************************
//#endif /*CODE_COMMON_PERIPHERALS_H_*/
